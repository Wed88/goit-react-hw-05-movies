{"version":3,"file":"static/js/667.b9e37ac5.chunk.js","mappings":"6LAGaA,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAClC,OACE,wBACGD,EAAME,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAd,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMP,GAA1C,SACGG,GAASC,KAFLF,U,2LCAJM,EAAa,WACxB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOV,EAAP,KAAcW,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACMd,GAAWe,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAO,CAAC,IACKG,EADN,mCACT,2FACER,GAAW,GADb,mBAGuBS,EAAAA,EAAAA,IAAqBJ,GAH5C,UAIgC,KADtBK,EAHV,QAIaC,QAAQC,OAJrB,uBAKMC,EAAAA,GAAAA,MAAY,iCALlB,0BASIjB,EAASc,EAAKC,SATlB,kDAWIb,EAAS,EAAD,IAXZ,yBAaIE,GAAW,GAbf,6EADS,qDAiBTQ,OAED,CAACH,IAcJ,OACE,4BACGR,IAAS,0DAAkCA,EAAMiB,WACjDf,IAAW,SAAC,IAAD,KACZ,kBAAMgB,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAC0B,KAArCD,EAAKE,SAASf,MAAMgB,MAAMC,SAI9BlB,EAAgB,CAAEC,MAAOa,EAAKE,SAASf,MAAMgB,QAE7CH,EAAKK,UAO2BC,aAAa,MAA3C,WACE,kBAAOC,KAAK,OAAOnC,KAAK,QAAQoC,YAAY,gBAC5C,2CAEA7B,EAAQ,IAAK,SAAC,IAAD,CAAYZ,MAAOA,EAAOC,SAAUA","sources":["components/MoviesList/MoviesList.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ items, location }) => {\n  return (\n    <ul>\n      {items.map(({ id, title, name }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title || name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ),\n  location: PropTypes.object,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieBySearchName } from '../../services/themoviedbAPI';\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\nimport Loader from '../../components/Loader/Loader';\n\nexport const MoviesPage = () => {\n  const [items, setItems] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      async function fetchItems() {\n        setLoading(true);\n        try {\n          const data = await getMovieBySearchName(query);\n          if (data.results.length === 0) {\n            toast.error(' Enter the correct movie name');\n            return;\n          }\n\n          setItems(data.results);\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      }\n      fetchItems();\n    }\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (form.elements.query.value.trim() === '') {\n      return;\n    }\n\n    setSearchParams({ query: form.elements.query.value });\n\n    form.reset();\n  };\n\n  return (\n    <main>\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\n      {loading && <Loader />}\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <input type=\"text\" name=\"query\" placeholder=\"Enter name\" />\n        <button>Search</button>\n      </form>\n      {!error > 0 && <MoviesList items={items} location={location} />}\n    </main>\n  );\n};\n"],"names":["MoviesList","items","location","map","id","title","name","to","state","from","MoviesPage","useState","setItems","error","setError","loading","setLoading","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchItems","getMovieBySearchName","data","results","length","toast","message","onSubmit","e","preventDefault","form","currentTarget","elements","value","trim","reset","autoComplete","type","placeholder"],"sourceRoot":""}